#! @PERL@ -w
#
#/******************************************************************************/
#/*              PERL INTERFACE BETWEEN GOQAT AND SEXTRACTOR                   */
#/*                                                                            */
#/* Copyright (C) 2011 - 2012  Edward Simonson                                 */
#/*                                                                            */
#/* This file is part of GoQat.                                                */
#/*                                                                            */
#/* GoQat is free software; you can redistribute it and/or modify              */
#/* it under the terms of the GNU General Public License as published by       */
#/* the Free Software Foundation; either version 2 of the License, or          */
#/* (at your option) any later version.                                        */
#/*                                                                            */
#/* This program is distributed in the hope that it will be useful,            */
#/* but WITHOUT ANY WARRANTY; without even the implied warranty of             */
#/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              */
#/* GNU General Public License for more details.                               */
#/*                                                                            */
#/* You should have received a copy of the GNU General Public License          */
#/* along with this program; if not, see <http://www.gnu.org/licenses/> .      */
#/*                                                                            */
#/******************************************************************************/


use warnings;
use strict;
use File::Copy;

my $TRUE = 1;
my $FALSE = 0;

# Get some general options

my $SINGLE = $FALSE;
my $INITRANGE = $FALSE;
my $RANGE = $FALSE;
my $FINAL = $FALSE;
my $h_offset;
my $v_offset;
my $v_height;
my $time_stamp;
my $max_shift;
my $results_catalog;
my $fits_file;
my $directory;
my $base_name;
my $frame_num;
my $index;
my $cat_index;
my $phot_index;
my $catalog;
my $photom_data;
my $astrom_data;
for (my $i = 0; $i <= $#ARGV; $i++) {
  if ($ARGV[$i] eq "--Single") {$SINGLE = $TRUE}
  elsif ($ARGV[$i] eq "--InitRange") {$INITRANGE = $TRUE}
  elsif ($ARGV[$i] eq "--Range") {$RANGE = $TRUE}
  elsif ($ARGV[$i] eq "--Final") {$FINAL = $TRUE}
  elsif ($ARGV[$i] eq "--hoffset") {$h_offset = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "--voffset") {$v_offset = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "--vheight") {$v_height = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "--timestamp") {$time_stamp = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "--maxshift") {$max_shift = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "--results_catalog") {$results_catalog = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "--sextractor") {$fits_file = $ARGV[$i + 1]}
  elsif ($ARGV[$i] eq "-CATALOG_NAME") {

    # Set the next free file name for results.  SExtractor writes the
    # actual results to a file of this name; 'results_catalog' defined
    # above is a fixed symlink name passed from GoQat that is set to
    # point to this catalog file.

    $catalog = $ARGV[$i + 1];
    $cat_index = 0;
    $phot_index = 0;
    while (-e $catalog . "_catalog_" . $cat_index . ".txt") {$cat_index++}
    while (-e $catalog . "_photom_" . $phot_index . ".txt") {$phot_index++}
    if ($cat_index > $phot_index) {
      $index = $cat_index;
    } else {
      $index = $phot_index;
    }
    if ($INITRANGE) {
      if (! $cat_index) {
        die ("No pre-existing reference catalog!")
      } else {
        copy ($catalog . "_catalog_" . --$cat_index . ".txt", $catalog . "_catalog_" . $index . ".txt");
      }
    }
    if ($RANGE || $FINAL) {$index--}
    $ARGV[$i + 1] = $catalog . "_catalog_" . $index . ".txt";
  }
}

$photom_data = $catalog . "_photom_" . $index . ".txt";
$astrom_data = $catalog . "_astrom_" . $index . ".txt";
$catalog = $catalog . "_catalog_" . $index . ".txt";

# Set some other file names

$_ = $fits_file;
/(.+\/)/;
$directory = $1;
/.+\/(.+)_\d+\.fit/;
$base_name = $1;
/.+_(\d+)\.fit/;
$frame_num = $1;
$frame_num += 0;  # Removes leading zeros!

# Get just the SExtractor options

while ($ARGV[0] ne "--sextractor") {shift @ARGV}
shift @ARGV; 
my $SExtractor = join (' ', 'sex', @ARGV);

if ($SINGLE) { # Do photometry on the current frame only.
               # Must do this at least once before using the
               # INITRANGE and RANGE options.

  system ($SExtractor);  # Writes results to output catalog
  
  # Read catalog data
  
  open (CATALOG, $catalog) or die ("Cannot open output catalog for reading!");
  my @cat_data = <CATALOG>;
  chomp (@cat_data);
  close (CATALOG);
  
  # Append the number of the latest frame that contains the positions 
  # of all the identified stars to the output catalog
  
  open (CATALOG, '>', $catalog) or die ("Cannot open output catalog for writing!");
  foreach (@cat_data) {print (CATALOG $_ . " " . $frame_num . "\n")}
  close (CATALOG);
}

if ($SINGLE || $INITRANGE || $RANGE) { # For a range of frames, this is called once
                                       # with INITRANGE set for the first frame,
                                       # then once for each subsequent frame 
                                       # in the range with RANGE set.

  # Open output catalog from previous invocation of SExtractor.  We sort the
  # results from the next invocation of SExtractor according to the results
  # in this catalog.
  
  open (CATALOG, $catalog) or die ("Cannot open output catalog for reading!");
  my @cat_data = <CATALOG>;
  chomp (@cat_data);
  close (CATALOG);
  
  # Get the x- and y- coordinates of each star, and the frame number of
  # the most recent frame containing the star

  my @cat_table;
  my @match_file_num;
  foreach (@cat_data) {
    my @fields = split (/ +/);
    push (@cat_table, $fields[2], $fields[3]);  # x & y coords of star
    push (@match_file_num, $fields[8]); # Last frame number containing this star
  }
  
  # Run SExtractor on the current frame, saving to new output catalog
  
  system ($SExtractor);
  
  open (CATALOG, $catalog) or die ("Cannot open output catalog for reading!");
  my @new_data = <CATALOG>;
  chomp (@new_data);
  close (CATALOG);
  
  # Read new catalog data
  
  my @new_table;
  foreach (@new_data) {
    my @fields = split (/ +/);
    push (@new_table, $fields[2], $fields[3]);  # x & y coords of star
  }
  
  # For each entry in cat_data, find the closest entry in new_data
  # that is within MAX_SHIFT of an entry in cat_data
  
  my %data_OK;
  my $cdr;
  for (my $i = 0; $i <= $#new_table; $i += 2) {
    my $diff = 9999;
    for (my $j = 0; $j <= $#cat_table; $j += 2) {
      my $new_diff = sqrt (($new_table[$i    ] - $cat_table[$j    ])**2 +
                           ($new_table[$i + 1] - $cat_table[$j + 1])**2);
      if ($new_diff < $diff) {
        $diff = $new_diff;
        $cdr = $j / 2;
      }
    }
    if ($diff < $max_shift) {
      $data_OK{$cdr} = $i / 2;
    }
  }
  
  # If a match has been found, push the corresponding record from new_data
  # into the out_data array, along with the current frame number (to
  # indicate that the star has been found in this frame).  Otherwise,
  # re-run SExtractor using the last frame on which the star was found
  # as a template, pushing the corresponding output record and frame
  # number into out_data.
  
  my @out_data;  
  for (my $i = 0; $i <= $#cat_data; $i++) {
    if (exists ($data_OK{$i})) {
      push (@out_data, $new_data[$data_OK{$i}] . " " . $frame_num . "\n");
    } else {
      my $match_file = $directory . $base_name . "_" . sprintf ("%06d", $match_file_num[$i]) . ".fit";
      my $SExtractor_match = $SExtractor;
      $SExtractor_match =~ s/^sex /sex $match_file,/;
      system ($SExtractor_match);
      open (CATALOG, $catalog) or die ("Cannot open output catalog for reading!");
      my @match_data = <CATALOG>;
      chomp (@match_data);
      close (CATALOG);
      push (@out_data, $match_data[$i] . " " . $match_file_num[$i] . "\n");
    }
  }
  
  # Write new version of the output catalog, containing all measurements
  # from this frame
  
  open (CATALOG, '>', $catalog) or die ("Cannot open output catalog for writing!");
  foreach (@out_data) {print (CATALOG)}
  close (CATALOG);

  # Write photometric data as measurement and error pairs in tabular
  # form, with the average sky measurement as the last column.  Write
  # astrometric data as (x, y) pairs in columns corresponding to the
  # photometry data.
    
  my @phot_table;
  my @astr_table;
  my @sky;
  @match_file_num = ();
  push (@phot_table, $frame_num, $time_stamp);   # Frame number and time-stamp
  push (@astr_table, $frame_num, $time_stamp);   # Frame number and time-stamp
  foreach (@out_data) {
    my @fields = split (/ +/);
    push (@phot_table, $fields[4], $fields[5]);  # Measurement and error
    push (@sky, $fields[6]);                     # Sky for this measurement
    push (@astr_table, $fields[2] + $h_offset, $v_height - $fields[3] + $v_offset); # x- and y- coords in original video frame
    push (@match_file_num, $fields[8]);          # Used for tidying no longer needed frames - see below
  }
  my $ave_sky = 0;
  $ave_sky += $_ for @sky;
  $ave_sky = $ave_sky / ($#sky + 1);
  push (@phot_table, $ave_sky);
  open (TABLE, '>>', $photom_data) or die ("Cannot open photometry table for writing!");
  print (TABLE join ("\t", @phot_table) . "\n");
  close (TABLE);
  open (TABLE, '>>', $astrom_data) or die ("Cannot open astrometry table for writing!");
  print (TABLE join ("\t", @astr_table) . "\n");
  close (TABLE);
  
  # Remove any frames not listed in the output catalog
  
  foreach (@match_file_num) {
    my $match_file = $directory . $base_name . "_" . sprintf ("%06d", $_) . ".fit";
    rename ($match_file, $match_file . "x");
  }
  my $match_files = $directory . $base_name . "_*.fit";
  system ("rm $match_files");
  foreach (@match_file_num) {
    my $match_file = $directory . $base_name . "_" . sprintf ("%06d", $_) . ".fit";
    rename ($match_file . "x", $match_file);
  }
}

if ($FINAL) { # This is called to tidy up after each single frame
              # or each range of frames.

  # Check the time-stamps in the table data, adding a 86400s offset
  # where the day wraps at 00:00:00 UTC.

  open (TABLE, $photom_data) or die ("Cannot open photometry table for reading!");
  my @phot_table = <TABLE>;
  close (TABLE);
  open (TABLE, $astrom_data) or die ("Cannot open astrometry table for reading!");
  my @astr_table = <TABLE>;
  close (TABLE);
  
  open (PHOT_TABLE, '>', $photom_data) or die ("Cannot open photometry table for writing!");
  open (ASTR_TABLE, '>', $astrom_data) or die ("Cannot open astrometry table for writing!");
  
  my $i = 0;
  my $time_offset = 0;
  my $prev_time = 0;
  my $phot_rec;
  my $astr_rec;
  foreach (@phot_table) {
    if ($i > 0) {
      /^\d+\t(\d+\.\d+)/;  # Get time-stamp
      if ($1 < $prev_time) {$time_offset += 86400}  # Add offset if day wraps
      $prev_time = $1;
      my $new_time = $prev_time + $time_offset;
      s/(^\d+)\t\d+\.\d+/$1\t$new_time/;  # Set new time-stamp
      $phot_rec = $_;
      $_ = $astr_table[$i];
      s/(^\d+)\t\d+\.\d+/$1\t$new_time/;  # Set new time-stamp (must be as for photometry table)
      $astr_rec = $_;
    } else {
      /^\d+\t(\d+\.\d+)/;  # Get time-stamp
      $prev_time = $1;
      $phot_rec = $_;
      $astr_rec = $astr_table[$i];
    }
    $i++;
    print (PHOT_TABLE $phot_rec);
    print (ASTR_TABLE $astr_rec);
  }
  
  close (PHOT_TABLE);
  close (ASTR_TABLE);
}

# Set the symbolic link to the current version of the catalog

unlink ($results_catalog);  # Delete symlink if it already exists
symlink ($catalog, $results_catalog) or die ("Cannot create symbolic link to output catalog on target filesystem!");

exit 0;
