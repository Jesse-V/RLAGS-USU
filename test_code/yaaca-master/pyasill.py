
import numpy as np
import os
from ctypes import *

#########################################################################
# generated by CParser.py
_asill_vars = {'ASILL_ASI120MC': 4619,
 'ASILL_ASI120MM': 4618,
 'ASILL_E': 2,
 'ASILL_FMT_RAW16': 2,
 'ASILL_FMT_RAW8': 0,
 'ASILL_N': 0,
 'ASILL_PAR_ANALOG_GAIN': 0,
 'ASILL_PAR_BIAS_SUB': 6,
 'ASILL_PAR_COL_DENOISE': 8,
 'ASILL_PAR_DIGITAL_GAIN': 1,
 'ASILL_PAR_DIGITAL_GAIN_B': 5,
 'ASILL_PAR_DIGITAL_GAIN_G1': 3,
 'ASILL_PAR_DIGITAL_GAIN_G2': 4,
 'ASILL_PAR_DIGITAL_GAIN_R': 2,
 'ASILL_PAR_FLIP_X': 9,
 'ASILL_PAR_FLIP_Y': 10,
 'ASILL_PAR_N': 11,
 'ASILL_PAR_ROW_DENOISE': 7,
 'ASILL_PCLK_24MHZ': 1,
 'ASILL_PCLK_25MHZ': 0,
 'ASILL_PCLK_2MHZ': 6,
 'ASILL_PCLK_40MHZ': 2,
 'ASILL_PCLK_48MHZ': 3,
 'ASILL_PCLK_8MHZ': 5,
 'ASILL_PCLK_96MHZ': 4,
 'ASILL_S': 1,
 'ASILL_W': 3,
 '_ASILL_H_': 1}

_asill_funcs = {'asill_buffer2float': (['int'],
                        (('A', ['struct asill_s', '*'], None),
                         ('fb', ['float', '*'], None))),
                'asill_buffer2buffer': (['int'],
                        (('A', ['struct asill_s', '*'], None),
                         ('b', ['void', '*'], None))),
 'asill_done_buffer': (['void'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_bin': (['int'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_buffer': (['uint8_t', '*'],
                      (('A', ['struct asill_s', '*'], None),)),
 'asill_get_exp_us': (['uint32_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_format': (['int'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_fps': (['float'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_h': (['uint16_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_int_par': (['int'],
                       (('A', ['struct asill_s', '*'], None),
                        ('par', ['int'], None))),
 'asill_get_max_exp_us': (['uint32_t'],
                          (('A', ['struct asill_s', '*'], None),)),
 'asill_get_maxh': (['uint16_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_maxw': (['uint16_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_min_exp_us': (['uint32_t'],
                          (('A', ['struct asill_s', '*'], None),)),
 'asill_get_pclk': (['int'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_temp': (['float'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_w': (['uint16_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_x': (['uint16_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_get_y': (['uint16_t'], (('A', ['struct asill_s', '*'], None),)),
 'asill_is_color': (['int'], (('A', ['struct asill_s', '*'], None),)),
 'asill_load_pars': (['int'], (('A', ['struct asill_s', '*'], None),)),
 'asill_new': (['struct asill_s', '*'],
               (('model', ['uint16_t'], None),
                ('n', ['int'], None),
                ('has_buffer', ['int'], None),
                ('cb', ['asill_new_frame_f'], None))),
 'asill_pulse': (['void'],
                 (('A', ['struct asill_s', '*'], None),
                  ('dir', ['int'], None),
                  ('ms', ['int'], None))),
 'asill_save_pars': (['int'], (('A', ['struct asill_s', '*'], None),)),
 'asill_sel_pclk': (['int'],
                    (('A', ['struct asill_s', '*'], None),
                     ('pclk', ['int'], None))),
 'asill_set_exp_us': (['int'],
                      (('A', ['struct asill_s', '*'], None),
                       ('exp', ['uint32_t'], None))),
 'asill_set_int_par': (['int'],
                       (('A', ['struct asill_s', '*'], None),
                        ('par', ['int'], None),
                        ('gain', ['int'], None))),
 'asill_set_save': (['int'],
                    (('A', ['struct asill_s', '*'], None),
                     ('path', ['char', '*'], None))),
 'asill_set_wh': (['int'],
                  (('A', ['struct asill_s', '*'], None),
                   ('w', ['uint16_t'], None),
                   ('h', ['uint16_t'], None),
                   ('bin', ['int'], None),
                   ('fmt', ['int'], None))),
 'asill_set_xy': (['int'],
                  (('A', ['struct asill_s', '*'], None),
                   ('x', ['uint16_t'], None),
                   ('y', ['uint16_t'], None)))}
#########################################################################

_G = globals()
_path = os.path.dirname('__file__')
_lib = np.ctypeslib.load_library('libasill', _path)

for k,v in _asill_vars.iteritems():
    if k[:6] == 'ASILL_':
        k = k[6:]
    _G[k] = v

_cTypes = {
    'char': c_char,
    'wchar': c_wchar,
    'unsigned char': c_ubyte,
    'uint8_t': c_ubyte,
    'short': c_short,
    'short int': c_short,
    'unsigned short': c_ushort,
    'uint16_t': c_ushort,
    'unsigned short int': c_ushort,
    'int': c_int,
    'unsigned': c_uint,
    'unsigned int': c_uint,
    'uint32_t': c_uint,
    'long': c_long,
    'long int': c_long,
    'unsigned long': c_ulong,
    'unsigned long int': c_ulong,
    '__int64': c_longlong,
    'long long': c_longlong,
    'long long int': c_longlong,
    'unsigned __int64': c_ulonglong,
    'unsigned long long': c_ulonglong,
    'unsigned long long int': c_ulonglong,
    'float': c_float,
    'double': c_double,
    'long double': c_longdouble,
    'void': None,
    'asill_new_frame_f': c_ulong,
    }
_cPtrTypes = {
    'char': c_char_p,
    'uint8_t': c_char_p,
    'wchar': c_wchar_p,
    'void': c_void_p,
    'struct asill_s' : c_void_p,
    'float': c_void_p,
    }

def c2p(r):
    if len(r) == 2:
        rt = _cPtrTypes[r[0]]
    else:
        rt = _cTypes[r[0]]
    return rt


for k,v in _asill_funcs.iteritems():
    _lib[k].restype = c2p(v[0])
    a = []
    for i in v[1]:
        a.append(c2p(i[1]))
    _lib[k].argtypes = a

_requires = ('C', 'W', 'A')

class Cam(object):
    def __init__(self, model, n):
        self.c = _lib.asill_new(model, n, 1, None)
        if not self.c:
            raise Exception("ASICam not found")    
    def __getattr__(self, name):
        return lambda *args, **kwargs: _lib["asill_" + name](self.c, *args, **kwargs)
    def get_frame(self, as_float = False):
        if not _lib.asill_get_buffer(self.c):
            return None
        if as_float:
            dt = np.float32
        else:
            if _lib.asill_get_format(self.c) == FMT_RAW16:
                dt = ">u2"
            else:
                dt = np.uint8
        x = np.empty([_lib.asill_get_h(self.c),
                      _lib.asill_get_w(self.c)],
                     dtype = dt)
        x = np.require(x, dt, _requires)
        if as_float:
            _lib.asill_buffer2float(self.c, c_void_p(x.ctypes.data))
        else:
            _lib.asill_buffer2buffer(self.c, c_void_p(x.ctypes.data))
        return x
